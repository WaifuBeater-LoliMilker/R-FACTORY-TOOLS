// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using R_Factory_Tools.Models;
using R_Factory_Tools.Utilities;
using System;
using System.Collections.Generic;

namespace R_Factory_Tools.Models.Context;

public partial class r_factoryContext : DbContext
{
    protected override void OnConfiguring(DbContextOptionsBuilder options)
        => options.UseMySql(ConnectionStringProvider.Default, new MySqlServerVersion(new Version(8, 0, 30)));

    public virtual DbSet<Areas> Areas { get; set; }

    public virtual DbSet<AuditLog> AuditLog { get; set; }

    public virtual DbSet<Communication> Communication { get; set; }

    public virtual DbSet<CommunicationParam> CommunicationParam { get; set; }

    public virtual DbSet<DeviceCommunicationParamConfig> DeviceCommunicationParamConfig { get; set; }

    public virtual DbSet<DeviceParameterLogs> DeviceParameterLogs { get; set; }

    public virtual DbSet<DeviceParameters> DeviceParameters { get; set; }

    public virtual DbSet<Devices> Devices { get; set; }

    public virtual DbSet<RefreshTokens> RefreshTokens { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Areas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("areas");

            entity.HasIndex(e => e.AreaCode, "AreaCode_UNIQUE").IsUnique();

            entity.Property(e => e.AreaCode).HasMaxLength(20);
            entity.Property(e => e.AreaName).HasMaxLength(100);
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.TableName).HasName("PRIMARY");

            entity.ToTable("audit_log");

            entity.Property(e => e.TableName)
                .HasMaxLength(64)
                .HasColumnName("table_name");
            entity.Property(e => e.LastModified)
                .HasColumnType("datetime")
                .HasColumnName("last_modified");
        });

        modelBuilder.Entity<Communication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("communication");

            entity.HasIndex(e => e.CommunicationName, "CommunicationName").IsUnique();

            entity.Property(e => e.CommunicationName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
        });

        modelBuilder.Entity<CommunicationParam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("communication_param");

            entity.Property(e => e.DataType).HasMaxLength(50);
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'1'");
            entity.Property(e => e.ParamKey)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<DeviceCommunicationParamConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_communication_param_config");

            entity.Property(e => e.ConfigValue)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<DeviceParameterLogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_parameter_logs");

            entity.Property(e => e.LogValue)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<DeviceParameters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_parameters");

            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ParamName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PollingInterval).HasDefaultValueSql("'5000'");
            entity.Property(e => e.Unit).HasMaxLength(20);
        });

        modelBuilder.Entity<Devices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("devices");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.DeviceName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<RefreshTokens>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("refresh_tokens");

            entity.HasIndex(e => e.Token, "token_UNIQUE").IsUnique();

            entity.HasIndex(e => e.UserId, "user_id_UNIQUE").IsUnique();

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.IsRevoked).HasComment("0 = active, 1 = revoked (invalidated)");
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("users");

            entity.Property(e => e.Fullname).HasMaxLength(145);
            entity.Property(e => e.Password).HasMaxLength(145);
            entity.Property(e => e.Username).HasMaxLength(145);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}